/* Generated By:JavaCC: Do not edit this line. LuaParser.java */
package parser;

import util.*;
import core.*;
import java.util.*;

public class LuaParser implements LuaParserConstants {

  public static void main(String args [])
  {
    LuaParser parser;
    if (args.length == 0)
    {
      System.out.println("Lua PLP Parser Version 0.0.1: Reading from standard input . . .");
      parser = new LuaParser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Lua PLP Parser Version 0.0.1: Reading from file " + args [0] + " . . .");
      try
      {
        parser = new LuaParser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Java Parser Version 1.0.2: File " + args [0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println("Lua PLP Parser Version 0.0.1: Usage is one of:");
      System.out.println("         java LuaGrammar < inputfile");
      System.out.println("OR");
      System.out.println("         java LuaGrammar inputfile");
      return;
    }
    try
    {
      Trecho trecho;
      trecho = parser.Trecho();
      System.out.println("Lua PLP Parser Version 0.0.1: Lua program parsed successfully.");

      //trecho.accept(trecho);
    }
    catch (ParseException e)
    {
      System.out.println("Lua PLP Parser Version 0.0.1: Encountered errors during parse.");
       System.out.println(e.getMessage());
    }
  }

  private static Exp.VarExp assertvarexp(Exp.ExpPrimaria pe) throws ParseException {
        if (!pe.isvarexp())
                throw new ParseException("expected variable");
        return (Exp.VarExp) pe;
  }

  private static Exp.ChamadaFunc assertfunccall(Exp.ExpPrimaria pe) throws ParseException {
        if (!pe.isfunccall())
                throw new ParseException("expected function call");
        return (Exp.ChamadaFunc) pe;
  }

/** Root production. */
  final public Trecho Trecho() throws ParseException {
        Bloco b;
        Trecho t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 69:
      jj_consume_token(69);
             token_source.SwitchTo(IN_COMMENT);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    b = Bloco();
    jj_consume_token(0);
                                                                    t=new Trecho(b); {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Bloco Bloco() throws ParseException {
        Bloco b = new Bloco();
        Comando c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case 70:
      case 73:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      c = Comando();
                      b.add(c);
    }
                                    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Comando Comando() throws ParseException {
        Comando c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 70:
      jj_consume_token(70);
             {if (true) return null;}
      break;
    case NAME:
    case 73:
      c = ExprComando();
                          {if (true) return c;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Comando ExprComando() throws ParseException {
        Exp.ExpPrimaria p;
        Comando c=null;
    p = ExpPrimaria();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
    case 72:
      c = Assign(assertvarexp(p));
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
         if(c==null){c=Comando.chamadafunc(assertfunccall(p));}{if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Comando Assign(Exp.VarExp v0) throws ParseException {
        List<Exp.VarExp> vl = new ArrayList<Exp.VarExp>();
        vl.add(v0);
        Exp.VarExp ve;
        List<Exp> el;
        Comando c;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(71);
      ve = VarExp();
                          vl.add(ve);
    }
    jj_consume_token(72);
    el = ExpList();
                                                           c=Comando.assignment(vl,el); {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Exp.VarExp VarExp() throws ParseException {
        Exp.ExpPrimaria p;
    p = ExpPrimaria();
                         {if (true) return assertvarexp(p);}
    throw new Error("Missing return statement in function");
  }

  final public Exp.ExpPrimaria ExpPrimaria() throws ParseException {
        Exp.ExpPrimaria p;
    p = ExpPrefixa();
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      p = OpPosFixo(p);
    }
                                                       {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Exp.ExpPrimaria OpPosFixo(Exp.ExpPrimaria lhs) throws ParseException {
        Token n;
        Exp e;
        FuncArgs a;
        Exp.ExpPrimaria p;
    a = FuncArgs();
                      p=Exp.functionop(lhs, a); {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public FuncArgs FuncArgs() throws ParseException {
        List<Exp> el=null;
        LuaString s;
        FuncArgs a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      jj_consume_token(73);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NIL:
      case NOT:
      case TRUE:
      case NAME:
      case NUMBER:
      case STRING:
      case CHARSTRING:
      case 69:
      case 73:
      case 76:
        el = ExpList();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(74);
                                  a=FuncArgs.explist(el); {if (true) return a;}
      break;
    case STRING:
    case CHARSTRING:
      s = Str();
                                                  a=FuncArgs.string(s); {if (true) return a;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp.ExpPrimaria ExpPrefixa() throws ParseException {
        Token n;
        Exp e;
        Exp.ExpPrimaria p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      n = jj_consume_token(NAME);
                                   p=Exp.nomeprefix(n.image); {if (true) return p;}
      break;
    case 73:
      jj_consume_token(73);
      e = Exp();
      jj_consume_token(74);
                           p=Exp.parensprefix(e); {if (true) return p;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Exp> ExpList() throws ParseException {
        List<Exp> l = new ArrayList<Exp>();
        Exp e;
    e = Exp();
                 l.add(e);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(71);
      e = Exp();
                                          l.add(e);
    }
                                                        {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
        Exp e,s;
        int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NIL:
    case TRUE:
    case NAME:
    case NUMBER:
    case STRING:
    case CHARSTRING:
    case 73:
      e = SimpleExp();
      break;
    case NOT:
    case 69:
    case 76:
      op = Unop();
      s = Exp();
                                            e=Exp.expunaria(op,s);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_5;
      }
      op = Binop();
      s = Exp();
                                          e=Exp.expbinaria(e,op,s);
    }
                                                                        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Exp SimpleExp() throws ParseException {
        Token n;
        LuaString s;
        Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NIL:
      jj_consume_token(NIL);
                                                          e=Exp.constante(LuaValue.NIL); {if (true) return e;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                                                          e=Exp.constante(LuaValue.TRUE); {if (true) return e;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                                                          e=Exp.constante(LuaValue.FALSE); {if (true) return e;}
      break;
    case NUMBER:
      n = jj_consume_token(NUMBER);
                                                          e=Exp.constantenumerica(n.image); {if (true) return e;}
      break;
    case STRING:
    case CHARSTRING:
      s = Str();
                                                          e=Exp.constante(s); {if (true) return e;}
      break;
    case NAME:
    case 73:
      e = ExpPrimaria();
                                                  {if (true) return e;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int Binop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 75:
      jj_consume_token(75);
                        {if (true) return Lua.OP_ADD;}
      break;
    case 76:
      jj_consume_token(76);
                        {if (true) return Lua.OP_SUB;}
      break;
    case 77:
      jj_consume_token(77);
                        {if (true) return Lua.OP_MUL;}
      break;
    case 78:
      jj_consume_token(78);
                        {if (true) return Lua.OP_DIV;}
      break;
    case 79:
      jj_consume_token(79);
                        {if (true) return Lua.OP_POW;}
      break;
    case 80:
      jj_consume_token(80);
                        {if (true) return Lua.OP_MOD;}
      break;
    case 81:
      jj_consume_token(81);
                        {if (true) return Lua.OP_CONCAT;}
      break;
    case 82:
      jj_consume_token(82);
                        {if (true) return Lua.OP_LT;}
      break;
    case 83:
      jj_consume_token(83);
                        {if (true) return Lua.OP_LE;}
      break;
    case 84:
      jj_consume_token(84);
                        {if (true) return Lua.OP_GT;}
      break;
    case 85:
      jj_consume_token(85);
                        {if (true) return Lua.OP_GE;}
      break;
    case 86:
      jj_consume_token(86);
                        {if (true) return Lua.OP_EQ;}
      break;
    case 87:
      jj_consume_token(87);
                        {if (true) return Lua.OP_NEQ;}
      break;
    case AND:
      jj_consume_token(AND);
                        {if (true) return Lua.OP_AND;}
      break;
    case OR:
      jj_consume_token(OR);
                        {if (true) return Lua.OP_OR;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int Unop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 76:
      jj_consume_token(76);
                        {if (true) return Lua.OP_UNM;}
      break;
    case NOT:
      jj_consume_token(NOT);
                        {if (true) return Lua.OP_NOT;}
      break;
    case 69:
      jj_consume_token(69);
                        {if (true) return Lua.OP_LEN;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LuaString Str() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
                                  {if (true) return Str.quoteString(token.image);}
      break;
    case CHARSTRING:
      jj_consume_token(CHARSTRING);
                          {if (true) return Str.charString(token.image);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(73)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(CHARSTRING)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LuaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80000,0x80000,0x0,0x0,0x60190c08,0x60000000,0x80000,0x0,0x60190c08,0x60190408,0x1000,0x800,0x60000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20,0x240,0x240,0x180,0x80,0x1220,0x200,0x200,0x80,0x1220,0x200,0xfff800,0x1020,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LuaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LuaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LuaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LuaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LuaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LuaParser(LuaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LuaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[88];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 88; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
